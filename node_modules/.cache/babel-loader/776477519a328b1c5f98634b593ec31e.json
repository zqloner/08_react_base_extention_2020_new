{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\workspace\\\\webstrom-workspace\\\\React_Code\\\\08_react_base_extention_2020_new\\\\src\\\\01_setState\\\\index.jsx\";\nimport React, { Component } from \"react\";\nexport default class SetStateDemo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0\n    };\n\n    this.addNumber = () => {\n      /*\r\n        对象式的setState写法\r\n            setState(stateChange, [callback])------对象式的setState\r\n              1.stateChange为状态改变对象(该对象可以体现出状态的更改)\r\n              2.callback是可选的回调函数, 它在状态更新完毕、界面也更新后(render调用后)才被调用\r\n       */\n      // const {count} = this.state\n      // this.setState({count:count+1},()=>{\n      //   //更新成功的回调\n      //   //这里才能取到最新的state值。\n      //   console.log(this.state.count)\n      //   })\n\n      /*-----------------------------------------------------------------------------------------------------------*/\n\n      /*\r\n        函数式的setState\r\n            setState(updater, [callback])------函数式的setState\r\n              1.updater为返回stateChange对象的函数。\r\n              2.updater可以接收到state和props。\r\n              4.callback是可选的回调函数, 它在状态更新、界面也更新后(render调用后)才被调用。\r\n       */\n      this.setState((state, props) => {\n        console.log(\"state\", state);\n        console.log(\"props\", props);\n        return {\n          count: state.count + 1\n        };\n      });\n      /*\r\n          总结：\r\n              使用原则：\r\n                (1).如果新状态不依赖于原状态 ===> 使用对象方式\r\n                (2).如果新状态依赖于原状态 ===> 使用函数方式\r\n                (3).如果需要在setState()执行后获取最新的状态数据,\r\n                  要在第二个callback函数中读取\r\n       */\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A:\", this.state.count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.addNumber,\n        children: \"\\u70B9\\u6211+1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["E:/workspace/webstrom-workspace/React_Code/08_react_base_extention_2020_new/src/01_setState/index.jsx"],"names":["React","Component","SetStateDemo","state","count","addNumber","setState","props","console","log","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AAEA,eAAe,MAAMC,YAAN,SAA2BD,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAClDE,KADkD,GAC1C;AACNC,MAAAA,KAAK,EAAC;AADA,KAD0C;;AAAA,SAIlDC,SAJkD,GAItC,MAAI;AACd;AACJ;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,WAAKC,QAAL,CAAc,CAACH,KAAD,EAAOI,KAAP,KAAe;AAC3BC,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBN,KAApB;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBF,KAApB;AACA,eAAO;AAACH,UAAAA,KAAK,EAACD,KAAK,CAACC,KAAN,GAAY;AAAnB,SAAP;AACC,OAJH;AAMA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AAEG,KA1CiD;AAAA;;AA4ClDM,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAA,sDAAW,KAAKP,KAAL,CAAWC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,KAAKC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAnDiD","sourcesContent":["import React,{Component} from \"react\";\r\n\r\nexport default class SetStateDemo extends Component {\r\n  state = {\r\n    count:0\r\n  }\r\n  addNumber = ()=>{\r\n    /*\r\n      对象式的setState写法\r\n          setState(stateChange, [callback])------对象式的setState\r\n            1.stateChange为状态改变对象(该对象可以体现出状态的更改)\r\n            2.callback是可选的回调函数, 它在状态更新完毕、界面也更新后(render调用后)才被调用\r\n     */\r\n    // const {count} = this.state\r\n    // this.setState({count:count+1},()=>{\r\n    //   //更新成功的回调\r\n    //   //这里才能取到最新的state值。\r\n    //   console.log(this.state.count)\r\n    //   })\r\n\r\n    /*-----------------------------------------------------------------------------------------------------------*/\r\n\r\n    /*\r\n      函数式的setState\r\n          setState(updater, [callback])------函数式的setState\r\n            1.updater为返回stateChange对象的函数。\r\n            2.updater可以接收到state和props。\r\n            4.callback是可选的回调函数, 它在状态更新、界面也更新后(render调用后)才被调用。\r\n     */\r\n    this.setState((state,props)=>{\r\n      console.log(\"state\",state)\r\n      console.log(\"props\",props)\r\n      return {count:state.count+1}\r\n      })\r\n\r\n    /*\r\n        总结：\r\n            使用原则：\r\n              (1).如果新状态不依赖于原状态 ===> 使用对象方式\r\n              (2).如果新状态依赖于原状态 ===> 使用函数方式\r\n              (3).如果需要在setState()执行后获取最新的状态数据,\r\n                要在第二个callback函数中读取\r\n     */\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>当前求和为:{this.state.count}</h1>\r\n        <button onClick={this.addNumber}>点我+1</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}